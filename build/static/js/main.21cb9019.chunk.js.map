{"version":3,"sources":["serviceWorker.ts","initialize.js","reducers/initialState.js","reducers/index.js","reducers/reducer.js","reducers/actions.js","configureStore.js","graphql/query.graphql.js","graphql/mutation.graphql.js","reducers/selector.js","components/MainBody/MainBody.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Sentry","dsn","integrations","filter","integration","name","library","add","faCaretUp","faCaretDown","faCog","faSearch","faArrowsAltV","faBullseye","faPlusCircle","faBell","faEye","faFlagCheckered","faChartBar","faTable","faHeart","faPlus","faTags","faBookmark","faStickyNote","faColumns","faFilter","faTimes","faSignal","faBook","faEdit","faCheck","faTrash","faQuestion","initialState","word","allIds","byId","reducers","MainReducer","state","arguments","length","undefined","action","type","_action$payload","payload","wordIdList","wordById","Object","toConsumableArray","sort","objectSpread","form","formReducer","configureStore","enhancers","compose","applyMiddleware","thunk","createStore","combineReducers","assign","fetchWordsQuery","gql","_templateObject","addWordMutation","mutation_graphql_templateObject","getWords","props","list","wordValue","forEach","wordId","includes","toLowerCase","push","MainBody","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getAllOptions","wordOptions","inx","key","value","text","onClose","setState","isAddWordOpened","onOpen","onChange","e","data","inputValue","postWord","_this$props","addWordAction","isSaving","setTimeout","getType","typeList","map","typeData","index","react_default","a","createElement","style","display","fontSize","className","meanings","getMeanings","meaningData","meaning","concat","_this$props2","findWordById","wordIds","slice","wordData","color","marginBottom","wordName","desc","oldProps","_this$props3","onGetWordsAction","loading","_this$state","_this$props4","handleWordChange","handleSearchValue","Dropdown","fluid","selection","clearable","search","options","placeholder","onSearchChange","Button","content","onClick","Modal","open","Input","disabled","PureComponent","MainBodyQuery","graphql","variables","mapActionsToProps","wordList","dispatch","getState","indexOf","mutation","then","response","console","log","addWord","splice","catch","error","MainBodyMutation","flowRight","connect","App","searchQuery","components_MainBody_MainBody","client","ApolloClient","uri","process","ApolloApp","react_common_esm","es","store","src_App","ReactDOM","render","src_ApolloApp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21cb9019.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faCaretUp,\n  faCaretDown,\n  faCog,\n  faSearch,\n  faArrowsAltV,\n  faBullseye,\n  faBell,\n  faEye,\n  faFlagCheckered,\n  faChartBar,\n  faTable,\n  faHeart,\n  faPlus,\n  faBookmark,\n  faTags,\n  faStickyNote,\n  faColumns,\n  faFilter,\n  faTimes,\n  faSignal,\n  faBook,\n  faEdit,\n  faCheck,\n  faTrash,\n  faPlusCircle,\n  faQuestion\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./styles/scss/index.scss\";\nimport * as Sentry from '@sentry/browser';\nimport \"./polyfill.d.ts\";\n\nSentry.init({ \n  dsn: 'https://f1b819c7a5a34cd0b10b9211c593c2f4@sentry.io/1470444',\n  integrations(integrations) {\n    return integrations.filter(integration => integration.name !== 'Breadcrumbs');\n  }\n});\n\nlibrary.add(faCaretUp, faCaretDown, faCog, faSearch, faArrowsAltV, faBullseye, faPlusCircle, faBell, faEye, faFlagCheckered, faChartBar, faTable, faHeart, faPlus, faTags, faBookmark, faStickyNote, faColumns, faFilter, faTimes, faSignal, faBook, faEdit, faCheck, faTrash, faQuestion);\n\n","/**\n * @author Shyam Mittal\n * @email mittalshyam1007@gmail.com\n * @create date 2020-05-04 16:19:34\n * @modify date 2020-05-04 16:19:34\n * @desc [description]\n */\n\nexport default {\n  word: {\n    allIds: [],\n    byId: {},\n  },\n};\n","import MainReducer from \"./reducer\";\nimport { reducer as formReducer } from \"redux-form\";\n\nexport default {\n  MainReducer,\n  form: formReducer,\n};\n","/**\n * @author Shyam Mittal\n * @email mittalshyam1007@gmail.com\n * @create date 2020-04-22 23:51:30\n * @modify date 2020-04-22 23:51:30\n * @desc [description]\n */\n\nimport initialState from \"./initialState\";\nimport { GET_WORDS } from \"./actions\";\n\nconst MainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_WORDS:\n      let { wordIdList, wordById } = action.payload;\n      wordIdList = [...wordIdList];\n      wordIdList.sort();\n      state = {\n        ...state,\n        word: {\n          allIds: [...wordIdList],\n          byId: { ...wordById },\n        },\n      };\n      break;\n\n    default:\n      break;\n  }\n  return state;\n};\n\nexport default MainReducer;\n","export const GET_WORDS = \"store_words\";\n\nexport const onGetWordsAction = (wordList) => {\n  return (dispatch, getState) => {\n    const wordIdList = [];\n    const wordById = {};\n    if (wordList && wordList.length) {\n      wordList.forEach((word) => {\n        if (wordIdList.indexOf(word.wordName) === -1) {\n          wordIdList.push(word.wordName);\n        }\n        wordById[word.wordName] = word;\n      });\n      dispatch({\n        type: GET_WORDS,\n        payload: {\n          wordIdList,\n          wordById,\n        },\n      });\n    }\n  };\n};\n\nexport const addWordAction = (word, mutation) => {\n  return (dispatch, getState) => {\n    const state = getState();\n    mutation({\n      variables: {\n        wordName: word,\n      },\n    })\n      .then((response) => {\n        console.log(\"Saveed data\", response);\n        if (response && response.data && response.data.addWord) {\n          const wordIdList = state.MainReducer.word.allIds;\n          const wordById = state.MainReducer.word.byId;\n          wordById[word] = response.data.addWord;\n          if (wordIdList.indexOf(word) === -1) {\n            wordIdList.splice(0, 0, word);\n          }\n          dispatch({\n            type: GET_WORDS,\n            payload: {\n              wordIdList,\n              wordById,\n            },\n          });\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error in saving word\", error);\n      });\n  };\n};\nexport const findWordById = (word) => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const wordById = state.MainReducer.word.byId;\n    if (wordById && wordById[word]) {\n      return wordById[word];\n    }\n  };\n};\n","import { createStore, applyMiddleware, compose, combineReducers } from \"redux\";\nimport reducers from \"./reducers\";\nimport thunk from \"redux-thunk\";\nfunction configureStore() {\n  const enhancers = compose(\n    // Middleware store enhancer.\n    applyMiddleware(\n      //apolloClient.middleware(),\n      thunk,\n    ),\n    // Redux Dev Tools store enhancer.\n    // @see https://github.com/zalmoxisus/redux-devtools-extension\n    // We only want this enhancer enabled for development and when in a browser\n    // with the extension installed.\n    // process.env.NODE_ENV === \"development\" &&\n    //   typeof window !== \"undefined\" &&\n    //   (window).__REDUX_DEVTOOLS_EXTENSION__ &&\n    //   (window).__REDUX_DEVTOOLS_EXTENSION__()\n  );\n  const store = createStore(\n    combineReducers(\n      Object.assign(\n        {},\n        // The application reducers.\n        reducers,\n        // The system reducers.\n        // { apollo: apolloClient.reducer() },\n      ),\n    ),\n    enhancers,\n  );\n  // if (process.env.NODE_ENV === \"development\" && (module).hot) {\n  //   // Enable Webpack hot module replacement for reducers. This is so that we\n  //   // don't lose all of our current application state during hot reloading.\n  //   (module).hot.accept(\"./reducers\", () => {\n  //     // eslint-disable-next-line global-require\n  //     const nextRootReducer = require(\"./reducers\").default;\n\n  //     store.replaceReducer(nextRootReducer);\n  //   });\n  // }\n\n  return store;\n}\nexport default configureStore;\n","import { gql } from \"apollo-boost\";\n\nexport const fetchWordsQuery = gql`\n  query fetchWords {\n    getWords {\n      wordName\n      desc {\n        type\n        meanings\n      }\n    }\n  }\n`;\n","import { gql } from \"apollo-boost\";\n\nexport const addWordMutation = gql`\n  mutation($wordName: String!) {\n    addWord(wordName: $wordName) {\n      wordName\n      desc {\n        type\n        meanings\n      }\n    }\n  }\n`;\n","export const getWords = (state, props) => {\n  const allIds = state.MainReducer.word.allIds;\n  let list = [...allIds];\n  if (props.wordValue) {\n    list = [];\n    allIds.forEach((wordId) => {\n      if (wordId.includes(props.wordValue.toLowerCase())) {\n        list.push(wordId);\n      }\n    });\n  }\n  return list;\n};\n","import React, { PureComponent } from \"react\";\nimport { Dropdown, Input, Button, Modal } from \"semantic-ui-react\";\nimport { graphql } from \"react-apollo\";\nimport { connect } from \"react-redux\";\nimport flowRight from \"lodash/flowRight\";\nimport map from \"lodash/map\";\n\nimport {\n  onGetWordsAction,\n  addWordAction,\n  findWordById,\n} from \"../../reducers/actions\";\n\nimport \"./MainBody.scss\";\n\n//import query\nimport { fetchWordsQuery } from \"../../graphql/query.graphql\";\nimport { addWordMutation } from \"../../graphql/mutation.graphql\";\n\nimport { getWords } from \"../../reducers/selector\";\n\nclass MainBody extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wordOptions: [],\n      isAddWordOpened: false,\n      inputValue: \"\",\n      isSaving: false,\n    };\n  }\n\n  componentDidUpdate(oldProps) {\n    const { onGetWordsAction, allIds, byId } = this.props;\n    if (\n      oldProps &&\n      oldProps.data.loading &&\n      this.props.data &&\n      !this.props.data.loading &&\n      this.props.data.getWords &&\n      this.props.data.getWords.length\n    ) {\n      onGetWordsAction(this.props.data.getWords);\n    }\n  }\n\n  // handleWordChange = (e, data) => {\n  //   console.log(\"On Handle Chnage\", data.value);\n  //   this.setState({\n  //     wordValue: data.value,\n  //   });\n  // };\n\n  // handleSearchValue = (e, data) => {\n  //   console.log(\"On Handle Chnage\", data.value);\n  //   this.setState({\n  //     wordValue: data.searchQuery,\n  //   });\n  // };\n\n  getAllOptions = () => {\n    const { allIds } = this.props;\n    const wordOptions = [];\n\n    if (allIds && allIds.length) {\n      allIds.forEach((word, inx) => {\n        wordOptions.push({\n          key: word,\n          value: word,\n          text: word,\n        });\n      });\n    }\n    return wordOptions;\n  };\n\n  onClose = () => {\n    this.setState({\n      isAddWordOpened: false,\n    });\n  };\n\n  onOpen = () => {\n    this.setState({\n      isAddWordOpened: true,\n    });\n  };\n\n  onChange = (e, data) => {\n    this.setState({\n      inputValue: data.value,\n    });\n  };\n\n  postWord = () => {\n    const { inputValue } = this.state;\n    const { addWordMutation, addWordAction } = this.props;\n    if (inputValue) {\n      this.setState({\n        isSaving: true,\n      });\n\n      addWordAction(inputValue.toLowerCase(), addWordMutation);\n      setTimeout(() => {\n        this.setState({\n          isSaving: false,\n          inputValue: \"\",\n        });\n        this.onClose();\n      }, 500);\n    }\n  };\n\n  getType = (typeList) => {\n    return map(typeList, (typeData, index) => {\n      return (\n        <div key={index} style={{ display: \"flex\", fontSize: \"14px\" }}>\n          <div className=\"words-list-type-container\">({typeData.type})</div>\n          {typeData.meanings &&\n            typeData.meanings.length &&\n            this.getMeanings(typeData.meanings)}\n        </div>\n      );\n    });\n  };\n\n  getMeanings = (meanings) => {\n    let meaningData = \"\";\n    meanings.forEach((meaning) => {\n      meaningData = `${meaning}; `;\n    });\n    return <div>{meaningData}</div>;\n  };\n\n  getWords = () => {\n    const { allIds, findWordById } = this.props;\n    // allIds = allIds.sort();\n    let wordIds = allIds.slice();\n    return map(wordIds, (wordId, index) => {\n      const wordData = findWordById(wordId);\n      return (\n        <div key={index} style={{ color: \"#000\", marginBottom: \"20px\" }}>\n          <div className=\"word-list-heading\">{wordData.wordName}</div>\n          {wordData.desc && wordData.desc.length && this.getType(wordData.desc)}\n        </div>\n      );\n    });\n  };\n\n  render() {\n    const { wordOptions, isAddWordOpened, inputValue, isSaving } = this.state;\n    const { wordValue, handleWordChange, handleSearchValue } = this.props;\n    return (\n      <div className=\"main-body\">\n        <div className=\"header\">\n          <div className=\"title\">Vocab</div>\n          <div className=\"input-btn\">\n            <Dropdown\n              className=\"word-picker\"\n              fluid\n              selection\n              clearable\n              search={true}\n              options={this.getAllOptions()}\n              value={wordValue}\n              placeholder=\"Search\"\n              onChange={handleWordChange}\n              onSearchChange={handleSearchValue}\n            />\n          </div>\n        </div>\n        <div className=\"display\">\n          <div className=\"header\">Words List</div>\n          <div className=\"main-content\">\n            <div className=\"word-list\">{this.getWords()}</div>\n            <div className=\"float-btn\">\n              <Button content=\"+\" onClick={this.onOpen} />\n            </div>\n          </div>\n        </div>\n        <Modal open={isAddWordOpened} onClose={this.onClose}>\n          <div className=\"add-word-modal-container\">\n            <div className=\"add-word-modal-input-container\">\n              <Input\n                placeholder=\"Write your here...\"\n                fluid\n                value={inputValue}\n                onChange={this.onChange}\n              />\n            </div>\n\n            <Button\n              content=\"Add Word\"\n              disabled={inputValue ? false : true}\n              onClick={this.postWord}\n              loading={isSaving}\n            />\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst MainBodyQuery = graphql(fetchWordsQuery, {\n  options: (props) => {\n    return {\n      variables: {},\n    };\n  },\n})(MainBody);\n\nconst mapStateToProps = (state, props) => {\n  return {\n    allIds: getWords(state, props),\n    byId: state.MainReducer.word.byId,\n  };\n};\n\nconst mapActionsToProps = {\n  onGetWordsAction,\n  addWordAction,\n  findWordById,\n};\n\nconst MainBodyMutation = flowRight(\n  graphql(addWordMutation, { name: \"addWordMutation\" }),\n)(MainBodyQuery);\n\nexport default connect(mapStateToProps, mapActionsToProps)(MainBodyMutation);\n","import React, { PureComponent } from \"react\";\nimport MainBody from \"./components/MainBody\";\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wordValue: \"\",\n    };\n  }\n\n  handleWordChange = (e, data) => {\n    console.log(\"On Handle Chnage\", data.value);\n    this.setState({\n      wordValue: data.value,\n    });\n  };\n\n  handleSearchValue = (e, data) => {\n    console.log(\"On Search Chnage\", data.value);\n    this.setState({\n      wordValue: data.searchQuery,\n    });\n  };\n\n  render() {\n    const { wordValue } = this.state;\n    return (\n      <div className=\"app-container\">\n        <MainBody\n          wordValue={wordValue}\n          handleSearchValue={this.handleSearchValue}\n          handleWordChange={this.handleWordChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport \"./initialize\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport configureStore from \"./configureStore\";\n\nimport App from \"./App\";\n\n// Pass your GraphQL endpoint to uri\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_APOLLO_URL,\n});\n\nconst ApolloApp = () => (\n  <ApolloProvider client={client}>\n    <Provider store={configureStore()}>\n      <App />\n    </Provider>\n  </ApolloProvider>\n);\n\nReactDOM.render(<ApolloApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}